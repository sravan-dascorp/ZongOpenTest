using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class TheBox : MonoBehaviour, IInteractable,IResetable
{
    public bool DisableIfActionsEmpty => true;

    [SerializeField] UnityEvent OnDepositActionFullfilled;
    [SerializeField] UnityEvent OnDisabled;

    Items_SO itemInBox;

    ActionRequest actionRequestType;
    [SerializeField] Transform itemDepositPosition;

    [SerializeField] List<int> itemsSupposrted = new List<int>(); //use the item ID
    private Vector3 boxPosition;
    GameObject itemInBoxGaemobject;

    [SerializeField]string boxLetter;
    void Start()
    {
        actionRequestType = ActionRequest.itemDeposit;

        ResetEvent.instance.AddCallBackTarget(this);
    }


    public void AddItem(Items_SO item)
    {
        if (!itemInBox)
        {
            itemInBox = item;
            actionRequestType = ActionRequest.itemPickUP;
            itemInBoxGaemobject = GameObject.Instantiate(item.Prefab);
            itemInBoxGaemobject.transform.position = itemDepositPosition.position;
            OnDepositActionFullfilled?.Invoke();

            UIManager.Instance.ShowMessage("you have dropped in box " + boxLetter);
        }
        else
        {
            Debug.LogError("not supposed to happen");
        }

    }

    public bool CheckItemAcceptable(Items_SO item)
    {
        return itemsSupposrted.Contains(item.ItemID);
    }

    public void Disable()
    {
        OnDisabled?.Invoke();
        this.GetComponent<Collider>().enabled = false;
    }

    [SerializeField] string defaultActionDescription; //having field for each action :toDo

    struct ActionMessage
    {
        ActionRequest actionType;
        string actionDescription;
    }
    public string GetActionRequestDiscription()
    {
        if(actionRequestType == ActionRequest.itemDeposit) return "Put item in Bowl";
        if(actionRequestType == ActionRequest.itemPickUP) return "pick your stone";

        return defaultActionDescription;
    }

    public ActionRequest GetActionRequestType()
    {
        return actionRequestType;
    }

    public Items_SO GetItem()
    {
        Destroy(itemInBoxGaemobject);
        actionRequestType = ActionRequest.empty; //so 
        return itemInBox;  //
    }

    public Vector3 GetPosition()
    {
        return boxPosition;
    }

    public void OnFocused()
    {
        
    }

    public void Execute()
    {
        throw new System.NotImplementedException();
    }

    public void ResetState(int checkpoint = 0)
    {
        Debug.Log("state reset");
        itemInBox = null;
        if(itemInBoxGaemobject != null)Destroy(itemInBoxGaemobject);
        actionRequestType = ActionRequest.itemDeposit;
         this.GetComponent<Collider>().enabled = true;
    }

    // Start is called before the first frame update

    // Update is called once per frame

}
