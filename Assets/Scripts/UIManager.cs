using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

public class UIManager : MonoBehaviour
{
    // Start is called before the first frame update

    public static UIManager Instance;
    [SerializeField] GameObject itemButtonPrefab;
    [SerializeField] GameObject mainmenu;
    [SerializeField] GameObject instrumentWindowContainer;
    [SerializeField] GameObject weaponsWindowContainer; //this is the 


    public event Action<ItemType, int> OnItemSelectedFromUI;



    [SerializeField] Text deveMesageText;
    bool devMsgEnabled;



    [Header("Action Prompt")]

    [SerializeField] Text actionMessage;
    //press which key 


    //this is the 

    // [SerializeField] List<ItemType> uiButtons = new List<ItemType>(); 
    private void Awake()
    {

        if (Instance == null) Instance = this;
        else Destroy(this.gameObject);
    }

    [SerializeField] Button WeaponsButton;
    [SerializeField] Button InstrumentsButton;
    Dictionary<ItemType, List<GameObject>> UiItems = new Dictionary<ItemType, List<GameObject>>();
    [SerializeField] Button closeAllUIButton; //obviosly a hack
    void Start()
    {
        WeaponsButton.onClick.AddListener(() => ShowInventory(ItemType.weapon, !weaponsWindowContainer.gameObject.activeInHierarchy));
        InstrumentsButton.onClick.AddListener(() => ShowInventory(ItemType.instrument, !instrumentWindowContainer.gameObject.activeInHierarchy));

        closeAllUIButton.onClick.AddListener(() => CloaseAllUI());


        foreach (ItemType itemType in Enum.GetValues(typeof(ItemType)))
        {
            UiItems.Add(itemType, new List<GameObject>());
        }

    }


    bool isinventoryWindowActive = false;
    public bool IsAnyUIWindowOpen { get => isMainUIActive || isinventoryWindowActive; }
    bool isMainUIActive = false;

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.I))
        {
            isMainUIActive = !isMainUIActive;

            ShowMainUI(isMainUIActive);


        }

    }

    public void ShowMainUI(bool show)
    {
        mainmenu.SetActive(show);
        LockOrUnclokCursor(!show);
        isMainUIActive = show;
        closeAllUIButton.gameObject.SetActive(show);

    }

    public void ShowDevMessage(string message)
    {
        if (!devMsgEnabled) return;
        deveMesageText.text = message;
    }

    public void ShowActionMessage(string message, bool show)
    {
        actionMessage.text = message;

        actionMessage.transform.parent.gameObject.SetActive(show);
    }

    public void ShowInventory(ItemType itemType, bool show)
    {

        if (actionMessage.transform.parent.gameObject.activeInHierarchy) actionMessage.transform.parent.gameObject.SetActive(false);

        mainmenu.SetActive(false);
        isinventoryWindowActive = show;

        if (itemType == ItemType.instrument)
        {
            instrumentWindowContainer.transform.parent.parent.gameObject.SetActive(show);
            instrumentWindowContainer.SetActive(show);

        }
        else if (itemType == ItemType.weapon)
        {
            weaponsWindowContainer.transform.parent.parent.gameObject.SetActive(show);
            weaponsWindowContainer.SetActive(show);
        }

        LockOrUnclokCursor(!show);


        closeAllUIButton.gameObject.SetActive(show);
    }


    public void CloaseAllUI()
    {
        ShowMainUI(false);
        ShowInventory(ItemType.weapon, false);
        ShowInventory(ItemType.instrument, false);

        isinventoryWindowActive = false;
        isMainUIActive = false; //'   :(
    }


    public  void LockOrUnclokCursor(bool lockCursur)
    {
        if (lockCursur) Cursor.lockState = CursorLockMode.Locked;
        else Cursor.lockState = CursorLockMode.None;
    }



    public void AddItemToInventoryUI(Items_SO item)
    {
        GameObject go = GameObject.Instantiate(itemButtonPrefab);
        go.GetComponent<ItemButton>().SetItemData(item);
        if (item.ItemType == ItemType.instrument)
            go.transform.SetParent(instrumentWindowContainer.transform);
        else if (item.ItemType == ItemType.weapon)
            go.transform.SetParent(weaponsWindowContainer.transform);
        //for weapon do sos....


        UiItems[item.ItemType].Add(go);

        ShowMessage(item.ItemName + "added to inventory!");

        GlobalEvents.InvokeItemAddedToInvenntory(item);
    }



    public void RemoveFromInventoryUI(Items_SO item) //this was a quick hack..so :()
    {
        GameObject go = UiItems[item.ItemType].Find(x => x.GetComponent<ItemButton>().itemId == item.ItemID);
        if (go != null)
        {
            UiItems[item.ItemType].Remove(go);
            Destroy(go);

        }
    }



    public void OnClikcedItemButton(ItemType itemType, int Itemid)
    {
        Debug.Log(itemType);
        //ShowInventory(itemType, false);
        OnItemSelectedFromUI?.Invoke(itemType, Itemid);
        CloaseAllUI();
    }




    [SerializeField] Text messageTesxt;

    Coroutine messagePopCoroutine;

    public void ShowMessage(string message)
    {
        if(messagePopCoroutine != null) StopCoroutine(messagePopCoroutine);
        messagePopCoroutine = StartCoroutine(ShowMessageAsync(message));
    }
    IEnumerator ShowMessageAsync(string message)
    {
        messageTesxt.gameObject.SetActive(true);
        messageTesxt.text = message;

        yield return new WaitForSeconds(3f);
        messageTesxt.text = "";
        messageTesxt.gameObject.SetActive(false);
    }





}

// class inventoryWindow
// {
//     Items_SO[] items;

//      void populate items(items_SO[] items)
// {

// }
//  }